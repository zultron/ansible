# Make coding more python3-ish
from __future__ import (absolute_import, division)
__metaclass__ = type

from ansible.compat.tests import unittest
from . import AbstractTestClass

from ansible.modules.identity.ipa.ipa_user import UserIPAClient

import os

class TestUserIPAClient(unittest.TestCase, AbstractTestClass):

    test_class = UserIPAClient

    # Track state from test to test
    current_state = {}

    find_request = dict(
        method='user_find',
        name=[],
        item=dict(
            all = True,
            uid = 'test_user',
        ),
    )

    cert = ("MIICjDCCAfWgAwIBAgIJALTKa/IEGbmsMA0GCSqGSIb3DQEBCwUAMF8xCzAJ"
            "BgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRl"
            "cm5ldCBXaWRnaXRzIFB0eSBMdGQxGDAWBgNVBAMMD2gwMS56dWx0cm9uLmNv"
            "bTAeFw0xNzA1MDEwMDIwNDVaFw0xODA1MDEwMDIwNDVaMF8xCzAJBgNVBAYT"
            "AkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX"
            "aWRnaXRzIFB0eSBMdGQxGDAWBgNVBAMMD2gwMS56dWx0cm9uLmNvbTCBnzAN"
            "BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAulxki2+gnPCm+UYtVrv94OFeYhwq"
            "2rfVya5AvRYiTvxOHSNxrRvmwYMtWM8wFCwtZYb3Ts/m+0I/INZEY8Drhiyk"
            "qIlY+vcqPvgGJb7UeEtzRPFOc8WIIyKz8rJGPIptJ9cqjr6cSXE2rF0YIfTj"
            "rJNBz9L8vHMaPzoa8EiccrsCAwEAAaNQME4wHQYDVR0OBBYEFOGzxEOnQ/XK"
            "zL6kdK5f6qga7Xd0MB8GA1UdIwQYMBaAFOGzxEOnQ/XKzL6kdK5f6qga7Xd0"
            "MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADgYEAVWIsphw/pmAk8Fh+"
            "51Bat7W4ix2BzmB1F4aLskqkIZvh5KJQdB2stdmrA+FiuyfUHXmJQEzDEgmn"
            "xViVSZvRDAWedoD0fxC0zq+YBpHNk6k4F3wk8ccs61UcTT9sSF2XCyTPY2Dp"
            "h5t2NjIPnok21M9poZQuvV39ExKRgoIQLnA=")
    maxDiff = 3000  # Make cert visible in test diff output

    pubkey = ("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAYQDHymuDYR1HJ4TO92igOT"
              "8Cy1gFdCna2SlmfUabg7MCV4uWxzubOg/wJAh2GGgoxDTpidDSH3xKLKsf"
              "3nF221oMBWd1zgLtO5OYBJcFZB3+KFRtmrohtu5+VjUNwGpiDc8= test")

    def test_10_user_present_new(self):
        self.runner(
            test_key = 10,
            module_params = dict(
                uid = 'test_user',
                cn = 'test user',
                givenname = 'test',
                sn = 'user',
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find new object',
                    request = self.find_request,
                    reply = {},
                ),
                dict(
                    name = 'add new object',
                    request = {
                        'item': {'cn': 'test user',
                                 'givenname': 'test',
                                 'sn': 'user',
                                 'all': True},
                        'method': 'user_add',
                        'name': ['test_user']},
                    reply = {
                        'cn': 'test user',
                        'givenname': 'test',
                        'sn': 'user',
                        # Autogenerated
                        'displayname': 'test user',
                        'gecos': 'test user',
                        'homedirectory': '/home/test_user',
                        'krbprincipalname': [
                            'test_user@%s' % ( self.ipa_domain.upper()) ],
                        'loginshell': '/bin/sh',
                        'mail': ['test_user@%s' % self.ipa_domain.upper()],
                        'memberof_group': ['ipausers'],
                        'nsaccountlock': False,
                        'preserved': False,
                        # Autogenerated, but can't predict on live host:
                        # 'gidnumber': '620003',
                        # 'ipauniqueid': 'd1dc6b40-0a208002',
                        # 'uidnumber': '620003',
                    },
                ),
            ],
        )

    def test_11_user_existing_present_attr(self):
        self.runner(
            test_key = 11,
            module_params = dict(
                uid = 'test_user',                       # Key
                displayname = 'A Test User',             # Repl str
                loginshell = '/bin/bash',                # Repl str
                title = 'Chief Tester',                  # New str
                mail = 'test.user@example.com',          # Add to list
                telephonenumber = [ '101', '102' ],      # New list
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'modify existing object',
                    request = {
                        'item' : { 'displayname': 'A Test User',
                                   'loginshell': '/bin/bash',
                                   'title': 'Chief Tester',
                                   'addattr': [
                                       'mail=test.user@example.com',
                                       'telephonenumber=101',
                                       'telephonenumber=102',
                                   ],
                                   'all': True},
                        'method' : 'user_mod',
                        'name' : ['test_user']},
                    reply_updates = {
                        'displayname': 'A Test User',
                        'loginshell': '/bin/bash',
                        'title': 'Chief Tester',
                        'mail': [
                            'test.user@example.com',
                            'test_user@%s' % self.ipa_domain.upper(),
                        ],
                        'telephonenumber': [ '101', '102' ],
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_12_user_disabled_existing(self):
        self.runner(
            test_key = 12,
            module_params = dict(
                uid = 'test_user',                       # Key
                state = "disabled",                      # Disabled
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'disable existing object',
                    request = {
                        'item' : {},
                        'method' : 'user_disable',
                        'name' : [ 'test_user' ]},
                    reply_updates = { 'nsaccountlock': ['TRUE'] },
                ),
            ],
        )

    def test_13_user_existing_present_address(self):
        self.runner(
            test_key = 13,
            module_params = dict(
                uid = 'test_user',               # Key
                street = '55 Wheeler Street',    # New str...
                l = 'Cambridge',
                st = 'MA',
                postalcode = '02138',
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'modify existing object',
                    request = {
                        'item' : {
                            'street': '55 Wheeler Street',
                            'l': 'Cambridge',
                            'st': 'MA',
                            'postalcode': '02138',
                            'all': True},
                        'method' : 'user_mod',
                        'name' : ['test_user']},
                    reply_updates = {
                        'street': '55 Wheeler Street',
                        'l': 'Cambridge',
                        'st': 'MA',
                        'postalcode': '02138',
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_14_user_cert_add(self):

        self.runner(
            test_key = 14,
            module_params = dict(
                uid = 'test_user',                       # Key
                usercertificate = self.cert,             # New list entry
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'add cert',
                    request = {
                        'item' : {
                            'usercertificate' : [
                                { '__base64__' : self.cert } ],
                            'all': True},
                        'method' : 'user_add_cert',
                        'name' : ['test_user']},
                    reply_updates = {
                        'usercertificate' : [
                            { '__base64__' : self.cert } ],
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_15_user_cert_remove(self):

        self.runner(
            test_key = 15,
            module_params = dict(
                uid = 'test_user',                       # Key
                usercertificate = self.cert,             # New list entry
                state = "absent",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'remove cert',
                    request = {
                        'item' : {
                            'usercertificate' : [
                                { '__base64__' : self.cert } ],
                            'all': True},
                        'method' : 'user_remove_cert',
                        'name' : ['test_user']},
                    reply_updates = {
                        'usercertificate' : [],
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_16_user_add_krbprincipalname(self):
        self.runner(
            test_key = 16,
            module_params = dict(
                uid = 'test_user',               # Key
                krbprincipalname = [             # Add list item
                    'test_user1', 'test_user2'],
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'modify existing object',
                    request = {
                        'item' : {'all': True},
                        'method' : 'user_add_principal',
                        'name' : [ 'test_user', ['test_user1', 'test_user2'] ],
                    },
                    reply_updates = {
                        'krbprincipalname': [
                            'test_user1@%s' % self.ipa_domain.upper(),
                            'test_user2@%s' % self.ipa_domain.upper()],
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_17_user_remove_krbprincipalname(self):
        self.runner(
            test_key = 17,
            module_params = dict(
                uid = 'test_user',               # Key
                krbprincipalname = 'test_user1', # Remove list item
                state = "absent",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'remove principal',
                    request = {
                        'item' : { 'all': True},
                        'method' : 'user_remove_principal',
                        'name' : [ 'test_user', ['test_user1'] ],
                    },
                    reply_updates = {
                        'krbprincipalname': [
                            'test_user2@%s' % self.ipa_domain.upper()],
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_18_user_sshpubkey(self):
        self.runner(
            test_key = 18,
            module_params = dict(
                uid = 'test_user',               # Key
                ipasshpubkey = self.pubkey,      # New str
                state = "present",
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'add ssh pubkey',
                    request = {
                        'item' : {
                            'ipasshpubkey': self.pubkey,
                            'all': True},
                        'method' : 'user_mod',
                        'name' : [ 'test_user' ],
                    },
                    reply_updates = {
                        'ipasshpubkey': self.pubkey,
                    },
                ),
                # No enable/disable operation
            ],
        )

    def test_19_user_remove_existing(self):
        self.runner(
            test_key = 19,
            module_params = dict(
                uid = 'test_user',                 # Key
                state = "absent",                  # Absent
            ),
            post_json_calls = [
                dict(
                    name = 'find existing object',
                    request = self.find_request,
                ),
                dict(
                    name = 'disable existing object',
                    request = {
                        'item' : {},
                        'method' : 'user_del',
                        'name' : ['test_user']},
                    reply = {},
                ),
            ],
        )

